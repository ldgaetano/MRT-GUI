#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mrt-gui:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Helper functions
 */


// Function to check data
function checkData(data) {
    // parse data
    const re = /,/;
    data = data.split(re);

    // check size of array
    const size = 10; // change to 10 for actual flight
    if (data.length === size) {
        // remove first and last element of array
        const first = data.shift();
        const last = data.pop();
        if ( (first === 'S') && (last === 'E') ) {
            console.log("Data parsed successfully");
            return data;
        } else {
            console.log("Array head/footer error");
            return null;
        }
    } else {
        console.log("Array length error");
        return null;
    }
}

// Function to convert string data to integers
function toNumeric(data) {
    var numericalData = [];

    numericalData[0] = parseFloat(data[0]);
    numericalData[1] = parseFloat(data[1]);
    numericalData[2] = parseFloat(data[2]);
    numericalData[3] = parseInt(data[3]);
    numericalData[4] = parseFloat(data[4]);
    numericalData[5] = parseFloat(data[5]);
    numericalData[6] = parseFloat(data[6]);
    numericalData[7] = parseInt(data[7]);

    return numericalData;
}

// Function to create JSON data object
function toObject(data) {

    var dataJSON = {
        "lat": data[0],
        "long": data[1],
        "alt": data[2],
        "time": data[3],
        "temp": data[4],
        "vel": data[5],
        "acc": data[6],
        "sat": data[7],
    }

    return dataJSON;
}

/**
 * Files system writeStream implementation
 */

// Use the file system
var fs = require('fs');


/**
 * node serialport implementation
 */

// SerialPort setup
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');
const portName = '/dev/cu.usbmodem1411';
const myPort = new SerialPort(portName, {baudRate: 9600}, (err) => {
    if (err) {
        console.log("Cannot connect to serial port: " + portName);
    }
});

// parser for reading data from serial port until new line is detected
const parser = myPort.pipe(new Readline({ delimiter: '\r\n' }));

// Open errors will be emitted as an error event
parser.on('error', function(err) {
    console.log('Error: ', err.message);
});

/**
 * socket.io implementation
 */

var io = require('socket.io')(server);

io.on('connection', function(socket){
    console.log('USER CONNECTED');

    // Create writeStream to store data
    var ws = fs.createWriteStream('data/rocket_data.txt');

    ws.on('finish', () =>  {
        console.log("Disconnected from write stream!");
    });

    // Get current time in milliseconds
    var prevTime = Date.now();

    // Read data from serial port
    // data object is of type String
    parser.on('data', function(data) {

        console.log("Raw Data: ", data);

        // Parse the data
        var dataParsed = checkData(data);
        console.log("Parsed Data: ", dataParsed);

        // Check if array was returned successfully
        if ((dataParsed.constructor === Array) && (dataParsed !== null)) {

            // Convert array values to integers and floats
            var dataParsedNum = toNumeric(dataParsed);
            console.log(dataParsedNum);

            // Save parsed numerical data to .txt file
            ws.write(dataParsedNum + '\n');

            // Only send data every one second
            const threshold = 1000;
            var curTime =  Date.now();
            var deltaTime = curTime - prevTime

            if (deltaTime >= threshold) {

                // Create JSON object
                var dataObject = toObject(dataParsedNum);
                console.log(dataObject);

                io.emit('send data', JSON.stringify(dataObject));
                console.log('request sent');

                // Set the previous time to the current time
                prevTime = curTime;
            }

        }
    });

    socket.on('disconnect', function(){
        console.log('USER DISCONNECTED');
        ws.end(); // end the writeStream
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
