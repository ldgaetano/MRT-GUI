#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mrt-gui:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * node serialport implementation
 */

// SerialPort setup
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');
const portName = '/dev/cu.usbmodem1421';
const myPort = new SerialPort(portName, { baudRate: 9600 });
const parser = myPort.pipe(new Readline({ delimiter: '\r\n' }));

// Open errors will be emitted as an error event
parser.on('error', function(err) {
    console.log('Error: ', err.message);
});

// Read data from serialport
//parser.on('data', function(data) {
//    console.log(data);
//});

/**
 * socket.io implementation
 */

var io = require('socket.io')(server);

io.on('connection', function(socket){
    console.log('USER CONNECTED');

    /*
    socket.on('get data', function(){
        console.log('request received');

        // Read data from serialport
        parser.on('data', function(data) {
            //console.log(data);
            io.emit('send data', data);
            //console.log('request sent');
        });
        //io.emit('send data', 'test data');
        //console.log('request sent');
    });
  */

    // Read data from serialport
    parser.on('data', function(data) {
        console.log(data);
        io.emit('send data', data);
        //console.log('request sent');
    });

    socket.on('disconnect', function(){
        console.log('USER DISCONNECTED');
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
