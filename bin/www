#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mrt-gui:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Helper functions
 */


// Function to check data
function checkData(data) {
    // parse data
    var re = /,/;
    data = data.split(re);
    // check size of array
    var size = 8;
    if (data.length === size) {
        // remove first and last element of array
        var first = data.shift();
        var last = data.pop();
        if ( (first === 'S') && (last === 'E') ) {
            console.log
            return data;
        } else {
            return "Array head/footer error";
        }
    } else {
        return "Array length error";
    }
}

// Function to convert string data to integers
function toNumeric(data) {
    var numericalData = [];

    numericalData[0] = parseFloat(data[0]);
    numericalData[1] = parseFloat(data[1]);
    numericalData[2] = parseFloat(data[2]);
    numericalData[3] = parseInt(data[3]);
    numericalData[4] = parseFloat(data[4]);
    numericalData[5] = parseFloat(data[5]);
    numericalData[6] = parseFloat(data[6]);
    numericalData[7] = parseInt(data[7]);

    return numericalData;
}

// Function to create JSON data object
function toJSONObject(data) {
    var dataJSON = {
        "lat": data[0],
        "long": data[1],
        "alt": data[2],
        "time": data[3],
        "temp": data[4],
        "vel": data[5],
        "acc": data[6],
        "sat": data[7],
    }

    return dataJSON;
}

/**
 * node serialport implementation
 */

// SerialPort setup
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');
const portName = '/dev/cu.usbmodem1411';
const myPort = new SerialPort(portName, {baudRate: 9600});
const parser = myPort.pipe(new Readline({ delimiter: '\r\n' }));
//const parser = myPort.pipe(new Delimiter({delimiter: ','}));

// Open errors will be emitted as an error event
parser.on('error', function(err) {
    console.log('Error: ', err.message);
});

// Read data from serialport
//parser.on('data', function(data) {
//    console.log(data);
//});

/**
 * socket.io implementation
 */

var io = require('socket.io')(server);

io.on('connection', function(socket){
    console.log('USER CONNECTED');

    /*
    socket.on('get data', function(){
        console.log('request received');

        // Read data from serialport
        parser.on('data', function(data) {
            //console.log(data);
            io.emit('send data', data);
            //console.log('request sent');
        });
        //io.emit('send data', 'test data');
        //console.log('request sent');
    });
  */

    // Read data from serialport
    // data object is of type String
    parser.on('data', function(data) {
        console.log(data);
        var dataArray = checkData(data);
        console.log(dataArray);

        // Check if variable is of type array
        if (dataArray.constructor === Array) {
            // convert array values to integers and floats
            var dataArrayInt = toNumeric(dataArray);
            console.log(dataArrayInt);
            // create JSON object
            var dataObject = toJSONObject(dataArrayInt);
            console.log(dataObject);
            io.emit('send data', JSON.stringify(dataObject));
            console.log('request sent');
        }
    });

    socket.on('disconnect', function(){
        console.log('USER DISCONNECTED');
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
